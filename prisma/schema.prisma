// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   name          String
//   email         String    @unique
//   emailVerified DateTime?
//   image         String

//   accounts Account[]
//   sessions Session[]
//   Chat     Chat[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Chat {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   title  String
//   userId String @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id])
//   model  String

//   messages Message[]

//   totalTokens Int
//   totalCosts  Int

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Message {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   role    String
//   content Json
//   chatId  String @db.ObjectId
//   chat    Chat   @relation(fields: [chatId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String

  accounts Account[]
  sessions Session[]
  Chat     Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id     String @id @default(uuid())
  title  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  model  String

  messages Message[]

  totalTokens Int
  totalCosts  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String @id @default(uuid())
  role        String
  content     Json
  annotations Json[]
  chatId      String
  chat        Chat   @relation(fields: [chatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
